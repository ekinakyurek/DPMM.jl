var documenterSearchIndex = {"docs":
[{"location":"#Welcome-to-DPMM.jl's-documentation!-1","page":"Home","title":"Welcome to DPMM.jl's documentation!","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"#Function-Documentation-1","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n \"reference.md\",\n]","category":"page"},{"location":"reference/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"Contents","category":"page"},{"location":"reference/#","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Algorithms-1","page":"Reference","title":"Algorithms","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"DPMM.fit\nDPMM.DPMMAlgorithm\nDPMM.CollapsedAlgorithm\nDPMM.DirectAlgorithm\nDPMM.SplitMergeAlgorithm\nDPMM.run!\nDPMM.setup_workers\nDPMM.initialize_clusters","category":"page"},{"location":"reference/#DPMM.fit","page":"Reference","title":"DPMM.fit","text":"fit(X::AbstractMatrix; algorithm=DEFAULT_ALGO, ncpu=1, T=3000, benchmark=false, scene=nothing, o...)\n\n`fit` is the main function of DPMM.jl which clusters given data matrix where columns are data points.\n\nThe output is the labels for each data point.\n\nDefault clustering algorithm is `SplitMergeAlgorithm`\n\nKeywords:\n\n- `ncpu=1` : the number of parallel workers.\n\n- `T=3000` : iteration count\n\n- `benchmarks=false` : if true returns elapsed time\n\n- `scene=nothing`: plot scene for visualization. see `setup_scene`\n\n- o... : other keyword argument specific to `algorithm`\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.DPMMAlgorithm","page":"Reference","title":"DPMM.DPMMAlgorithm","text":"DPMMAlgorithm{P}\n\nAbstract base class for algorithms\n\nP stands for parallel.\n\nEach subtype should provide the following methods:\n\nAlgoType(X::AbstractMatrix; o...)` : constructor\nrandom_labels(X::AbstractMatrix,algo::AlgoType{P}) where P : random label generator\ncreate_clusters(X::AbstractMatrix,algo::AlgoType{P},labels) where P : initial clusters\nempty_cluster(algo::AlgoType) where P : an empty cluster (may be nothing)\nrun!(algo::AlgoType{P}, X, labels, clusters, emptycluster;o...) where P : run! modifies labels\n\nOther generic functions is implemented on top of these core functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.CollapsedAlgorithm","page":"Reference","title":"DPMM.CollapsedAlgorithm","text":"CollapsedAlgorithm{P,Q} <: DPMMAlgorithm{P}\n\nRun it by:\n\n  labels = fit(X; algorithm = CollapsedAlgorithm, quasi=false, ncpu=1, T=1000, keywords...)\n\nP stands for parallel, Q stands for quasi. Quasi algorithm updates the clusters only in the end of each iteration. Parallel algorithm is valid for quasi-collapsed algorithm only. The number of workers can passed by ncpu keyword argument to fit or run! functions\n\nProvides following methods:\n\nCollapsedAlgorithm(X::AbstractMatrix{T}; modelType=_default_model(T), α=1, ninit=1, parallel=false, quasi=false, o...)\nrandom_labels(X::AbstractMatrix, algo::CollapsedAlgorithm) where P\ncreate_clusters(X::AbstractMatrix, algo::CollapsedAlgorithm,labels) where P\nempty_cluster(algo::CollapsedAlgorithm) where P : an empty cluster\nrun!(algo::CollapsedAlgorithm{P,Q}, X, labels, clusters, cluster0; o...) where {P,Q}\n\nOther generic functions are implemented on top of these core functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DirectAlgorithm","page":"Reference","title":"DPMM.DirectAlgorithm","text":"DirectAlgorithm{P,Q} <: DPMMAlgorithm{P}\n\nRun it by:\n\n  labels = fit(X; algorithm = DirectAlgorithm, quasi=false, ncpu=1, T=1000, keywords...)\n\nP stands for parallel, Q stands for quasi. Quasi algorithm uses cluster population proportions as cluster weights. So, it doesn't sample mixture weights from Dirichlet distribution. In large N, this is very similar to non-quasi sampler. The number of workers can passed by ncpu keyword argument to fit or run! functions\n\nProvides following methods:\n\nDirectAlgorithm(X::AbstractMatrix{T}; modelType=_default_model(T), α=1, ninit=1, parallel=false, quasi=false, o...)\nrandom_labels(X::AbstractMatrix, algo::DirectAlgorithm) where P\ncreate_clusters(X::AbstractMatrix, algo::DirectAlgorithm,labels) where P\nempty_cluster(algo::DirectAlgorithm) where P : an empty cluster\nrun!(algo::DirectAlgorithm{P,Q}, X, labels, clusters, cluster0; o...) where {P,Q}\n\nOther generic functions are implemented on top of these core functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.SplitMergeAlgorithm","page":"Reference","title":"DPMM.SplitMergeAlgorithm","text":"SplitMergeAlgorithm{P,Q} <: DPMMAlgorithm{P}\n\nRun it by:\n\n  labels = fit(X; algorithm = SplitMergeAlgorithm, quasi=false, ncpu=1, T=1000, keywords...)\n\nP stands for parallel, Q stands for quasi. M=false algorithm doesn't do merge moves at all, so it is not exact However, emprical results shows that merge moves very less likely. The number of workers can passed by ncpu keyword argument to fit or run! functions\n\nProvides following methods:\n\nSplitMergeAlgorithm(X::AbstractMatrix{T}; modelType=_default_model(T), α=1, ninit=1, parallel=false, quasi=false, o...)\nrandom_labels(X::AbstractMatrix, algo::SplitMergeAlgorithm) where P\ncreate_clusters(X::AbstractMatrix, algo::SplitMergeAlgorithm,labels) where P\nempty_cluster(algo::SplitMergeAlgorithm) where P : an empty cluster\nrun!(algo::SplitMergeAlgorithm{P,Q}, X, labels, clusters, cluster0; o...) where {P,Q}\n\nOther generic functions are implemented on top of these core functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.run!","page":"Reference","title":"DPMM.run!","text":"run!(algo::DPMMAlgorithm, X, labels, clusters, emptycluster;o...)\n\nRuns the specified Gibbs Algorithm\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.setup_workers","page":"Reference","title":"DPMM.setup_workers","text":"setup_workers(ncpu::Integer)\n\nSetup parallel process, initialize required modules\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.initialize_clusters","page":"Reference","title":"DPMM.initialize_clusters","text":"initialize_clusters(X::AbstractMatrix, algo::DPMMAlgorithm{P}\n\nInitialize clusters and labels, sends data to workers if algo is parallel\n\n\n\n\n\n","category":"function"},{"location":"reference/#Algorithms-(Internal)-1","page":"Reference","title":"Algorithms (Internal)","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"DPMM.RestrictedClusterProbs\nDPMM.CRPprobs\nDPMM.SampleSubCluster\nDPMM.ClusterProbs\nDPMM.place_x!\nDPMM.label_x\nDPMM.logmixture_πs","category":"page"},{"location":"reference/#DPMM.RestrictedClusterProbs","page":"Reference","title":"DPMM.RestrictedClusterProbs","text":"RestrictedClusterProbs(πs::AbstractVector{V}, clusters::Dict,  x::AbstractVector) where V<:Real\n\nReturns normalized probability vector for a data point being any cluster\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.CRPprobs","page":"Reference","title":"DPMM.CRPprobs","text":"CRPprobs(clusters::Dict, cluster0::AbstractCluster, x::AbstractVector) where V<:Real\n\nReturns Chineese Restraunt Probabilities for a data point being any cluster + a new cluster\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.SampleSubCluster","page":"Reference","title":"DPMM.SampleSubCluster","text":" SampleSubCluster(πs::Vector{V}, cluster::SplitMergeCluster, x::AbstractVector) where V<:Real\n\nReturns normalized probability vector for a data point being right or left subcluster\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.ClusterProbs","page":"Reference","title":"DPMM.ClusterProbs","text":"ClusterProbs(πs::AbstractVector{V}, clusters::Dict, cluster0::AbstractCluster, x::AbstractVector) where V<:Real\n\nReturns normalized probability vector for a data point being any cluster + a new cluster\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.place_x!","page":"Reference","title":"DPMM.place_x!","text":"place_x!(model::AbstractDPModel,clusters::Dict,knew::Int,xi::AbstractVector)\n\nPlace a data point to its new cluster. This modifies `clusters`\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.label_x","page":"Reference","title":"DPMM.label_x","text":"label_x(clusters::Dict,knew::Int)\n\nReturn new cluster number for a data point\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.logmixture_πs","page":"Reference","title":"DPMM.logmixture_πs","text":"logmixture_πs(α::V, clusters::Dict{<:Integer, <:AbstractCluster}) where V<:Real\n\nSample log mixture weights from Dirichlet Distribution.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Clusters-1","page":"Reference","title":"Clusters","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"DPMM.AbstractCluster\nDPMM.CollapsedCluster\nDPMM.DirectCluster\nDPMM.SplitMergeCluster","category":"page"},{"location":"reference/#DPMM.AbstractCluster","page":"Reference","title":"DPMM.AbstractCluster","text":"AbstractCluster\n\nAbstract base class for clusters\n\nEach subtype should provide the following methods:\n\npopulation(c): population of the cluster\nisempty(m::AbstractCluster): checks whether the cluster is empty?\nlogαpdf(c,x) : log(∝likelihood) of a data point\nlognαpdf(c,x): log(population) + logαpdf(c,x) for a data point (used in CRP calculations)\nClusterType(m::AbstractDPModel,X::AbstractArray)  : constructor (X is the data as columns)\nClusterType(m::AbstractDPModel,s::SufficientStats): constructor\n\nOther generic functions are implemented on top of these core functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.CollapsedCluster","page":"Reference","title":"DPMM.CollapsedCluster","text":"CollapsedCluster{Pred<:Distribution, Prior<:Distribution} <: AbstractCluster\n\nThe CollapsedCluster is designed for Collapsed Gibbs algorithms.\n\nCollapsedCluster has below fields:     - n : population     - predictive : predictive distribution     - prior : prior distribution\n\nA CollapsedCluster are constructed via SufficientStats or data points:\n\n    CollapsedCluster(m::AbstractDPModel, X::AbstractArray) # X is the data as columns\n    CollapsedCluster(m::AbstractDPModel, s::SufficientStats)\n\nThere is also generic(not specific to CollapsedCluster) SuffStats method for getting suffstats for whole data as a dictionary:\n\n    SuffStats(model::AbstractDPModel, X::AbstractMatrix, z::AbstractArray{Int})\n\nThere are also specific methods defined for creating clusters for whole data as a dictionary:\n\n    CollapsedClusters(model::AbstractDPModel, X::AbstractMatrix, labels::AbstractArray{Int})\n    CollapsedClusters(model::AbstractDPModel, stats::Dict{Int,<:SufficientStats})\n\n- and + operations are defined for data addition and data removal from the cluster:\n\n    -(c::CollapsedCluster, x::AbstractVector)\n    +(c::CollapsedCluster, x::AbstractVector)\n\nsee AbstractCluster for generic functions for all Cluster types.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DirectCluster","page":"Reference","title":"DPMM.DirectCluster","text":"DirectCluster{Pred<:Distribution, Prior<:Distribution} <: AbstractCluster\n\nThe DirectCluster is designed for Direct Gibbs algorithms.\n\nDirectCluster has below fields:\n    `n` : population\n    `sampled` : sampled parameter distribution\n    'prior' : prior distribution\n\nA DirectCluster are constructed via SufficientStats or data points:\n```julia\n    DirectCluster(m::AbstractDPModel,X::AbstractArray) # X is the data as columns\n    DirectCluster(m::AbstractDPModel,s::SufficientStats)\n```\n\nThere is also generic(not specific to DirectCluster) SuffStats method for\ngetting sufficient stats for whole data data as a dictionary\n```julia\n    SuffStats(model::AbstractDPModel, X::AbstractMatrix, z::AbstractArray{Int})\n```\n\nThere are also specific methods defined for creating clusters for whole data as a dictionary:\n```julia\n    DirectClusters(model::AbstractDPModel, X::AbstractMatrix, labels::AbstractArray{Int})\n    DirectClusters(model::AbstractDPModel, stats::Dict{Int,<:SufficientStats})\n```\n\nsee `AbstractCluster` for generic functions for all Cluster types.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.SplitMergeCluster","page":"Reference","title":"DPMM.SplitMergeCluster","text":"SplitMergeCluster{Pred<:Distribution, Post<:Distribution, Prior<:Distribution} <: AbstractCluster\n\n\nThe SplitMergeCluster is designed for Split-Merge Gibbs algorithm.\n\nSplitMergeCluster has below fields:\n    - `n` : population\n    - `nr`: right subcluster population\n    - `nl`: left subcluster population\n    - `sampled` : sampled parameter distribution\n    - `right` : right subcluster sampled parameter distribution\n    - `left`: left subcluster sampled parameter\n    - `post` : posterior distributions\n    - `rightpost` : right subcluster posterior distributions\n    - `leftpost` : left subcluster posterior distributions\n    - 'prior' : prior distribution\n    - `llhs` : log marginal likelihoods assigned by cluster, right subcluster, leftsubcluster\n    - `llh_hist` : right + left log marginal likelihood history over 4 iteration\n    - 'prior' : prior distribution\n\nA SplitMergeCluster are constructed via SufficientStats or data points:\n```julia\n    SplitMergeCluster(m::AbstractDPModel,X::AbstractArray) # X is the data as columns\n    SplitMergeCluster(m::AbstractDPModel,s::SufficientStats)\n```\n\nThere is also generic SuffStats method for getting sufficient stats for whole data:\n```julia\nSuffStats(model::AbstractDPModel, X::AbstractMatrix, z::AbstractVector{Tuple{Int,Bool}})\n```\n\nThere are also specific methods defined for creating clusters for whole data:\n```julia\n    SplitMergeClusters(model::AbstractDPModel, X::AbstractMatrix, labels::AbstractVector{Tuple{Int,Bool}})\n```\n\nsee `AbstractCluster` for generic functions for all Cluster types.\n\nThe `logαpdf` and `lognαpdf` generic functions are extended for subcluster likelihoods.\n```julia\nlogαpdf(m::SplitMergeCluster,x,::Val{false}) # right subcluster likelihood\nlogαpdf(m::SplitMergeCluster,x,::Val{true})  # left subcluster likelihood\nlognαpdf(m::SplitMergeCluster, x, ::Val{false})  = log(population(m,Val(false))) + logαpdf(m, x, Val(false))\nlognαpdf(m::SplitMergeCluster, x, ::Val{true})   = log(population(m,Val(true))) + logαpdf(m, x, Val(true))\n```\n\n\n\n\n\n","category":"type"},{"location":"reference/#Models-1","page":"Reference","title":"Models","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"DPMM.AbstractDPModel\nDPMM.DPGMM\nDPMM.DPMNMM\nDPMM.DPGMMStats\nDPMM.DPMNMMStats","category":"page"},{"location":"reference/#DPMM.AbstractDPModel","page":"Reference","title":"DPMM.AbstractDPModel","text":"AbstractDPModel{T,D}\n\nAbstract base class for DPMMs\n\nT stands for element type, D is for dimensionality of the data\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DPGMM","page":"Reference","title":"DPMM.DPGMM","text":"DPGMM{T<:Real,D} <: AbstractDPModel{T,D}\n\nClass for DP Gaussian Mixture Models\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DPMNMM","page":"Reference","title":"DPMM.DPMNMM","text":"DPMNMM{T<:Real,D} <: AbstractDPModel{T,D}     Class for DP Multinomial Mixture Models\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DPGMMStats","page":"Reference","title":"DPMM.DPGMMStats","text":"DPGMMStats{T<:Real} <: SufficientStats\n\nSufficient statistics for Gaussian Models\n\n\n\n\n\n","category":"type"},{"location":"reference/#DPMM.DPMNMMStats","page":"Reference","title":"DPMM.DPMNMMStats","text":"DPMNMMStats{T<:Real} <: SufficientStats     Sufficient statistics for Multinomial Models\n\n\n\n\n\n","category":"type"},{"location":"reference/#Data-1","page":"Reference","title":"Data","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"DPMM.setup_scene\nDPMM.readNYTimes","category":"page"},{"location":"reference/#DPMM.setup_scene","page":"Reference","title":"DPMM.setup_scene","text":"setup_scene(X)\n\nInitialize plots for visualizing 2D data\n\n\n\n\n\n","category":"function"},{"location":"reference/#DPMM.readNYTimes","page":"Reference","title":"DPMM.readNYTimes","text":"readNYTimes(file::AbstractString)\n\nRead NYTimes dataset from given data file. It returns DPSparseMatrix\n\n\n\n\n\n","category":"function"},{"location":"reference/#Function-Index-1","page":"Reference","title":"Function Index","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"}]
}
